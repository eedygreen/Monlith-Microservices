{"findings": [{"app": "Monlith-Microservices", "type": "extscan", "title": "Ensure that HEALTHCHECK instructions have been added to container images .", "description": "Ensure that HEALTHCHECK instructions have been added to container images .\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_DOCKER_2/e41ff40e03aa1d8c14ee4e0d4d7fb8f8", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "HealthcheckExists", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Ensure that HEALTHCHECK instructions have been added to container images .", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/reverse_proxy/Dockerfile", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_DOCKER_2", "ruleName": "HealthcheckExists", "contextText": "0 FROM nginx:alpine\n", "snippetText": "0 FROM nginx:alpine\n"}, "tags": []}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Ensure that a user for the container has been created.", "description": "Ensure that a user for the container has been created.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_DOCKER_3/5341f8e43558d6d8e64fcf528ca8ffbb", "severity": "info", "owasp_category": "a6-misconfiguration", "category": "UserExists", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Ensure that a user for the container has been created.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/reverse_proxy/Dockerfile", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_DOCKER_3", "ruleName": "UserExists", "contextText": "0 FROM nginx:alpine\n", "snippetText": "0 FROM nginx:alpine\n"}, "tags": []}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Ensure that HEALTHCHECK instructions have been added to container images .", "description": "Ensure that HEALTHCHECK instructions have been added to container images .\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_DOCKER_2/5c5505f5d2513b9f9b52a5434783812e", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "HealthcheckExists", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Ensure that HEALTHCHECK instructions have been added to container images .", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-frontend/Dockerfile", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_DOCKER_2", "ruleName": "HealthcheckExists", "contextText": "0 ## Build\n", "snippetText": "0 ## Build\n"}, "tags": []}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Ensure that a user for the container has been created.", "description": "Ensure that a user for the container has been created.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_DOCKER_3/3c6d91440fed22c94521a976d82432e1", "severity": "info", "owasp_category": "a6-misconfiguration", "category": "UserExists", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Ensure that a user for the container has been created.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-frontend/Dockerfile", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_DOCKER_3", "ruleName": "UserExists", "contextText": "0 ## Build\n", "snippetText": "0 ## Build\n"}, "tags": []}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Ensure that HEALTHCHECK instructions have been added to container images .", "description": "Ensure that HEALTHCHECK instructions have been added to container images .\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_DOCKER_2/3ef0cb752b5d4f828144c6620cc9b85c", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "HealthcheckExists", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Ensure that HEALTHCHECK instructions have been added to container images .", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-api/udagram-api-feed/Dockerfile", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_DOCKER_2", "ruleName": "HealthcheckExists", "contextText": "0 # Use NodeJS base image\n", "snippetText": "0 # Use NodeJS base image\n"}, "tags": []}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Ensure that a user for the container has been created.", "description": "Ensure that a user for the container has been created.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_DOCKER_3/aa427894d658c436a1a24fff9329bd76", "severity": "info", "owasp_category": "a6-misconfiguration", "category": "UserExists", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Ensure that a user for the container has been created.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-api/udagram-api-feed/Dockerfile", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_DOCKER_3", "ruleName": "UserExists", "contextText": "0 # Use NodeJS base image\n", "snippetText": "0 # Use NodeJS base image\n"}, "tags": []}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Ensure that HEALTHCHECK instructions have been added to container images .", "description": "Ensure that HEALTHCHECK instructions have been added to container images .\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_DOCKER_2/333c37a64ec8971a2ac2131c20e9bbda", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "HealthcheckExists", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Ensure that HEALTHCHECK instructions have been added to container images .", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-api/udagram-api-user/Dockerfile", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_DOCKER_2", "ruleName": "HealthcheckExists", "contextText": "0 # Use NodeJS base image\n", "snippetText": "0 # Use NodeJS base image\n"}, "tags": []}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Ensure that a user for the container has been created.", "description": "Ensure that a user for the container has been created.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_DOCKER_3/f7e7425d0c50984dcbfa97e85dffab81", "severity": "info", "owasp_category": "a6-misconfiguration", "category": "UserExists", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Ensure that a user for the container has been created.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-api/udagram-api-user/Dockerfile", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_DOCKER_3", "ruleName": "UserExists", "contextText": "0 # Use NodeJS base image\n", "snippetText": "0 # Use NodeJS base image\n"}, "tags": []}, {"app": "Monlith-Microservices", "type": "extscan", "title": "'(' is invalid here. Did you forget to escape it?.", "description": "`(` is invalid here. Did you forget to escape it?.\n\n## Additional information\n\n**[1036](https://github.com/koalaman/shellcheck/wiki/SC1036)**", "internal_id": "1036/d9444618717ff3dffe095203146e885c", "severity": "info", "owasp_category": "", "category": "1036", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "'(' is invalid here. Did you forget to escape it?.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-frontend/udagram_tests/git_test.sh", "DATA_TYPE": "OSS_SCAN", "lineNumber": 4, "ruleId": "1036", "ruleName": "", "contextText": "verify cannot push to staging or master (protected branches)\n", "snippetText": "verify working on feature branch or similar\nverify cannot push to staging or master (protected branches)\n"}, "tags": []}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Parsing stopped here. Invalid use of parentheses?.", "description": "Parsing stopped here. Invalid use of parentheses?.\n\n## Additional information\n\n**[1088](https://github.com/koalaman/shellcheck/wiki/SC1088)**", "internal_id": "1088/f5d5e91264eff420dbb27e627c193e5b", "severity": "info", "owasp_category": "", "category": "1088", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Parsing stopped here. Invalid use of parentheses?.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-frontend/udagram_tests/git_test.sh", "DATA_TYPE": "OSS_SCAN", "lineNumber": 4, "ruleId": "1088", "ruleName": "", "contextText": "verify cannot push to staging or master (protected branches)\n", "snippetText": "verify working on feature branch or similar\nverify cannot push to staging or master (protected branches)\n"}, "tags": []}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Minimize the admission of root containers.", "description": "CIS Benchmark: **5.2.6**\n\nMinimize the admission of root containers.\n\nContainers may run as any Linux user. Containers which run as the root user, whilst constrained by Container Runtime security features still have a escalated likelihood of container breakout. Ideally, all containers should run as a defined non-UID 0 user. There should be at least one PodSecurityPolicy (PSP) defined which does not permit root users in a container. If you need to run root containers, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.runAsUser.rule` is set to either `MustRunAsNonRoot` or `MustRunAs` with the range of UIDs not including `0`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  runAsUser:\n    # Require the container to run without root privileges.\n    rule: 'MustRunAsNonRoot'\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_23/35c0a0fde1fdcae362b2dedf7e3369ed", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainers", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of root containers.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/reverse_proxy/kuberesources/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_23", "ruleName": "RootContainers", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.2.6", "shiftleft_managed": false}]}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Ensure that Service Account Tokens are only mounted where necessary.", "description": "CIS Benchmark: **5.1.6**\n\nEnsure that Service Account Tokens are only mounted where necessary.\n\nMounting service account tokens inside pods can provide an avenue for privilege escalation attacks where an attacker is able to compromise a single pod in the cluster. Avoiding mounting these tokens removes this attack avenue.\n\n## Remediation\n\nModify the definition of pods and service accounts which do not need to mount service account tokens to disable it.\n", "internal_id": "CKV_K8S_38/827929ca04bc91e9f32d485612a7610b", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ServiceAccountTokens", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Ensure that Service Account Tokens are only mounted where necessary.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/reverse_proxy/kuberesources/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_38", "ruleName": "ServiceAccountTokens", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.1.6", "shiftleft_managed": false}]}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Containers should run as a high UID to avoid host conflict.", "description": "Containers should run as a high UID to avoid host conflict.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_40/ba0808ad0f1ebafe0689773021beffdd", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainersHighUID", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Containers should run as a high UID to avoid host conflict.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/reverse_proxy/kuberesources/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_40", "ruleName": "RootContainersHighUID", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": []}, {"app": "Monlith-Microservices", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/b58e768b7aea078018be58d309bbcdc9", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/reverse_proxy/kuberesources/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "description": "CIS Benchmark: **5.7.2**\n\nEnsure that the seccomp profile is set to docker/default in your pod definitions.\n\nSeccomp (secure computing mode) is used to restrict the set of system calls applications can make, allowing cluster administrators greater control over the security of workloads running in the cluster. Kubernetes disables seccomp profiles by default for historical reasons. You should enable it to ensure that the workloads have restricted actions available within the container.\n\n## Remediation\n\nSeccomp is an alpha feature currently. By default, all alpha features are disabled. So, you would need to enable alpha features in the apiserver by passing \"--feature-gates=AllAlpha=true\" argument.\nEdit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to \"--feature-gates=AllAlpha=true\" KUBE_API_ARGS=\"--feature-gates=AllAlpha=true\". Based on your system, restart the kube-apiserver service.\nFor example:\n```bash\nsystemctl restart kube-apiserver.service\n```\n\nUse annotations to enable the docker/default seccomp profile in your pod definitions. An example is as below:\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: trustworthy-pod\n  annotations:\n    seccomp.security.alpha.kubernetes.io/pod: docker/default\nspec:\n  containers:\n    - name: trustworthy-container\n      image: sotrustworthy:latest\n```\n", "internal_id": "CKV_K8S_31/46396cdbbfe81cb366cfc9248db669ec", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "Seccomp", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/reverse_proxy/kuberesources/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_31", "ruleName": "Seccomp", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.2", "shiftleft_managed": false}]}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_29/0bb25d50494c1ba188b634d3ac7fd439", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "PodSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/reverse_proxy/kuberesources/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_29", "ruleName": "PodSecurityContext", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Image Tag should be fixed - not latest or blank.", "description": "Image Tag should be fixed - not latest or blank.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_14/f5addd4bdec66d5d85bc0e1ff7c95f12", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageTagFixed", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Image Tag should be fixed - not latest or blank.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/reverse_proxy/kuberesources/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 18, "ruleId": "CKV_K8S_14", "ruleName": "ImageTagFixed", "contextText": "18       - image: eedy/reverseproxy\n", "snippetText": "18       - image: eedy/reverseproxy\n        name: reverseproxy\n        imagePullPolicy: Always          \n"}, "tags": []}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Liveness Probe Should be Configured.", "description": "Liveness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_8/c4915241a377673705b936cce72b8e21", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "LivenessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Liveness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/reverse_proxy/kuberesources/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 18, "ruleId": "CKV_K8S_8", "ruleName": "LivenessProbe", "contextText": "18       - image: eedy/reverseproxy\n", "snippetText": "18       - image: eedy/reverseproxy\n        name: reverseproxy\n        imagePullPolicy: Always          \n"}, "tags": []}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Use read-only filesystem for containers where possible.", "description": "Use read-only filesystem for containers where possible.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_22/48c3682f76c23d6641766c22255d1e8b", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadOnlyFilesystem", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Use read-only filesystem for containers where possible.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/reverse_proxy/kuberesources/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 18, "ruleId": "CKV_K8S_22", "ruleName": "ReadOnlyFilesystem", "contextText": "18       - image: eedy/reverseproxy\n", "snippetText": "18       - image: eedy/reverseproxy\n        name: reverseproxy\n        imagePullPolicy: Always          \n"}, "tags": []}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Minimize the admission of containers with the NET_RAW capability.", "description": "CIS Benchmark: **5.2.7**\n\nDo not generally permit containers with the potentially dangerous NET_RAW capability.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. By default this can include potentially dangerous capabilities. With Docker as the container runtime the NET_RAW capability is enabled which may be misused by malicious containers. Ideally, all containers should drop this capability. There should be at least one PodSecurityPolicy (PSP) defined which prevents containers with the NET_RAW capability from launching. If you need to run containers with this capability, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.requiredDropCapabilities` is set to include either `NET_RAW` or `ALL`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  requiredDropCapabilities:\n    - ALL\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_28/aa7f7cc5e075320cd0f1d78d3af766e2", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "DropCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with the NET_RAW capability.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/reverse_proxy/kuberesources/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 18, "ruleId": "CKV_K8S_28", "ruleName": "DropCapabilities", "contextText": "18       - image: eedy/reverseproxy\n", "snippetText": "18       - image: eedy/reverseproxy\n        name: reverseproxy\n        imagePullPolicy: Always          \n"}, "tags": [{"key": "cis_category", "value": "5.2.7", "shiftleft_managed": false}]}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Minimize the admission of containers with capabilities assigned.", "description": "CIS Benchmark: **5.2.9**\n\nMinimize the admission of containers with capabilities assigned.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. Capabilities are parts of the rights generally granted on a Linux system to the root user. In many cases applications running in containers do not require any capabilities to operate, so from the perspective of the principal of least privilege use of capabilities should be minimized.\n\n## Remediation\n\nReview the use of capabilites in applications runnning on your cluster. Where a namespace contains applicaions which do not require any Linux capabities to operate consider adding a PSP which forbids the admission of containers which do not drop all capabilities.\n\n\n## Additional information\n\n- [Pod Security Policy](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities)", "internal_id": "CKV_K8S_37/4f2aa82e52e4571a6b762ab3c3cacdf2", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MinimizeCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with capabilities assigned.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/reverse_proxy/kuberesources/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 18, "ruleId": "CKV_K8S_37", "ruleName": "MinimizeCapabilities", "contextText": "18       - image: eedy/reverseproxy\n", "snippetText": "18       - image: eedy/reverseproxy\n        name: reverseproxy\n        imagePullPolicy: Always          \n"}, "tags": [{"key": "cis_category", "value": "5.2.9", "shiftleft_managed": false}]}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Image should use digest.", "description": "Image should use digest.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_43/117585208fb34e4673b75c7c983753e8", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageDigest", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Image should use digest.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/reverse_proxy/kuberesources/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 18, "ruleId": "CKV_K8S_43", "ruleName": "ImageDigest", "contextText": "18       - image: eedy/reverseproxy\n", "snippetText": "18       - image: eedy/reverseproxy\n        name: reverseproxy\n        imagePullPolicy: Always          \n"}, "tags": []}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Containers should not run with allowPrivilegeEscalation.", "description": "CIS Benchmark: **5.2.5**\n\nMinimize the admission of containers with allowPrivilegeEscalation.\n\nA container running with the allowPrivilegeEscalation flag set to true may have processes that can gain more privileges than their parent. There should be at least one PodSecurityPolicy (PSP) defined which does not permit containers to allow privilege escalation. The option exists (and is defaulted to true) to permit setuid binaries to run. If you have need to run containers which use setuid binaries or require privilege escalation, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.allowPrivilegeEscalation` field is set to `false`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_20/72ca6f4053f4de38e99da48e5167fa9d", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "AllowPrivilegeEscalation", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Containers should not run with allowPrivilegeEscalation.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/reverse_proxy/kuberesources/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 18, "ruleId": "CKV_K8S_20", "ruleName": "AllowPrivilegeEscalation", "contextText": "18       - image: eedy/reverseproxy\n", "snippetText": "18       - image: eedy/reverseproxy\n        name: reverseproxy\n        imagePullPolicy: Always          \n"}, "tags": [{"key": "cis_category", "value": "5.2.5", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_30/50cf2f5840a4c1efedbd7153c7fd8d36", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ContainerSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/reverse_proxy/kuberesources/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 18, "ruleId": "CKV_K8S_30", "ruleName": "ContainerSecurityContext", "contextText": "18       - image: eedy/reverseproxy\n", "snippetText": "18       - image: eedy/reverseproxy\n        name: reverseproxy\n        imagePullPolicy: Always          \n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Readiness Probe Should be Configured.", "description": "Readiness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_9/7370d483ac6bdd7a9ff96a12d8da54e7", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadinessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Readiness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/reverse_proxy/kuberesources/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 18, "ruleId": "CKV_K8S_9", "ruleName": "ReadinessProbe", "contextText": "18       - image: eedy/reverseproxy\n", "snippetText": "18       - image: eedy/reverseproxy\n        name: reverseproxy\n        imagePullPolicy: Always          \n"}, "tags": []}, {"app": "Monlith-Microservices", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/50dfecf48cda60ce166c0520463ca481", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/reverse_proxy/kuberesources/service.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "1 apiVersion: v1\n", "snippetText": "1 apiVersion: v1\nkind: Service\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "Monlith-Microservices", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/99dad4efdd5b036a08e61939fb4eabd9", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/reverse_proxy/kuberesources/backend-api-ingress.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "1 apiVersion: extensions/v1beta1\n", "snippetText": "1 apiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Minimize the admission of root containers.", "description": "CIS Benchmark: **5.2.6**\n\nMinimize the admission of root containers.\n\nContainers may run as any Linux user. Containers which run as the root user, whilst constrained by Container Runtime security features still have a escalated likelihood of container breakout. Ideally, all containers should run as a defined non-UID 0 user. There should be at least one PodSecurityPolicy (PSP) defined which does not permit root users in a container. If you need to run root containers, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.runAsUser.rule` is set to either `MustRunAsNonRoot` or `MustRunAs` with the range of UIDs not including `0`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  runAsUser:\n    # Require the container to run without root privileges.\n    rule: 'MustRunAsNonRoot'\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_23/8c110143ec0b3849e967ecd2279e2472", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainers", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of root containers.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-frontend/kuberesources/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_23", "ruleName": "RootContainers", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.2.6", "shiftleft_managed": false}]}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Ensure that Service Account Tokens are only mounted where necessary.", "description": "CIS Benchmark: **5.1.6**\n\nEnsure that Service Account Tokens are only mounted where necessary.\n\nMounting service account tokens inside pods can provide an avenue for privilege escalation attacks where an attacker is able to compromise a single pod in the cluster. Avoiding mounting these tokens removes this attack avenue.\n\n## Remediation\n\nModify the definition of pods and service accounts which do not need to mount service account tokens to disable it.\n", "internal_id": "CKV_K8S_38/7a0421315d956edbc7219811217c2854", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ServiceAccountTokens", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Ensure that Service Account Tokens are only mounted where necessary.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-frontend/kuberesources/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_38", "ruleName": "ServiceAccountTokens", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.1.6", "shiftleft_managed": false}]}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Containers should run as a high UID to avoid host conflict.", "description": "Containers should run as a high UID to avoid host conflict.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_40/5f2d928b28a304fd7aad5a129314e0bc", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainersHighUID", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Containers should run as a high UID to avoid host conflict.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-frontend/kuberesources/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_40", "ruleName": "RootContainersHighUID", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": []}, {"app": "Monlith-Microservices", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/fa1c7ec24f9856b2595da653f804e413", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-frontend/kuberesources/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "description": "CIS Benchmark: **5.7.2**\n\nEnsure that the seccomp profile is set to docker/default in your pod definitions.\n\nSeccomp (secure computing mode) is used to restrict the set of system calls applications can make, allowing cluster administrators greater control over the security of workloads running in the cluster. Kubernetes disables seccomp profiles by default for historical reasons. You should enable it to ensure that the workloads have restricted actions available within the container.\n\n## Remediation\n\nSeccomp is an alpha feature currently. By default, all alpha features are disabled. So, you would need to enable alpha features in the apiserver by passing \"--feature-gates=AllAlpha=true\" argument.\nEdit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to \"--feature-gates=AllAlpha=true\" KUBE_API_ARGS=\"--feature-gates=AllAlpha=true\". Based on your system, restart the kube-apiserver service.\nFor example:\n```bash\nsystemctl restart kube-apiserver.service\n```\n\nUse annotations to enable the docker/default seccomp profile in your pod definitions. An example is as below:\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: trustworthy-pod\n  annotations:\n    seccomp.security.alpha.kubernetes.io/pod: docker/default\nspec:\n  containers:\n    - name: trustworthy-container\n      image: sotrustworthy:latest\n```\n", "internal_id": "CKV_K8S_31/90243e029b5ca539026217f20cc27cb8", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "Seccomp", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-frontend/kuberesources/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_31", "ruleName": "Seccomp", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.2", "shiftleft_managed": false}]}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_29/ea56b4d770103aa80541cb4a015e2703", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "PodSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-frontend/kuberesources/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_29", "ruleName": "PodSecurityContext", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Image Tag should be fixed - not latest or blank.", "description": "Image Tag should be fixed - not latest or blank.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_14/b052ffcd1389f36500351d3f9bad003d", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageTagFixed", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Image Tag should be fixed - not latest or blank.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-frontend/kuberesources/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 18, "ruleId": "CKV_K8S_14", "ruleName": "ImageTagFixed", "contextText": "18       - name: udagram-frontend-api\n", "snippetText": "18       - name: udagram-frontend-api\n        image: eedy/frontend:latest\n        ports:\n"}, "tags": []}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Liveness Probe Should be Configured.", "description": "Liveness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_8/c7badf51b09f8b163452869e0d6258ee", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "LivenessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Liveness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-frontend/kuberesources/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 18, "ruleId": "CKV_K8S_8", "ruleName": "LivenessProbe", "contextText": "18       - name: udagram-frontend-api\n", "snippetText": "18       - name: udagram-frontend-api\n        image: eedy/frontend:latest\n        ports:\n"}, "tags": []}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Use read-only filesystem for containers where possible.", "description": "Use read-only filesystem for containers where possible.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_22/ad3aef9223d4aa160e278381dd108809", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadOnlyFilesystem", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Use read-only filesystem for containers where possible.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-frontend/kuberesources/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 18, "ruleId": "CKV_K8S_22", "ruleName": "ReadOnlyFilesystem", "contextText": "18       - name: udagram-frontend-api\n", "snippetText": "18       - name: udagram-frontend-api\n        image: eedy/frontend:latest\n        ports:\n"}, "tags": []}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Minimize the admission of containers with the NET_RAW capability.", "description": "CIS Benchmark: **5.2.7**\n\nDo not generally permit containers with the potentially dangerous NET_RAW capability.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. By default this can include potentially dangerous capabilities. With Docker as the container runtime the NET_RAW capability is enabled which may be misused by malicious containers. Ideally, all containers should drop this capability. There should be at least one PodSecurityPolicy (PSP) defined which prevents containers with the NET_RAW capability from launching. If you need to run containers with this capability, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.requiredDropCapabilities` is set to include either `NET_RAW` or `ALL`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  requiredDropCapabilities:\n    - ALL\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_28/e31cbe8058934387651a0e1b163fae5e", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "DropCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with the NET_RAW capability.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-frontend/kuberesources/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 18, "ruleId": "CKV_K8S_28", "ruleName": "DropCapabilities", "contextText": "18       - name: udagram-frontend-api\n", "snippetText": "18       - name: udagram-frontend-api\n        image: eedy/frontend:latest\n        ports:\n"}, "tags": [{"key": "cis_category", "value": "5.2.7", "shiftleft_managed": false}]}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Minimize the admission of containers with capabilities assigned.", "description": "CIS Benchmark: **5.2.9**\n\nMinimize the admission of containers with capabilities assigned.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. Capabilities are parts of the rights generally granted on a Linux system to the root user. In many cases applications running in containers do not require any capabilities to operate, so from the perspective of the principal of least privilege use of capabilities should be minimized.\n\n## Remediation\n\nReview the use of capabilites in applications runnning on your cluster. Where a namespace contains applicaions which do not require any Linux capabities to operate consider adding a PSP which forbids the admission of containers which do not drop all capabilities.\n\n\n## Additional information\n\n- [Pod Security Policy](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities)", "internal_id": "CKV_K8S_37/2c7d3d305c0deec4fb967ac13de8983c", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MinimizeCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with capabilities assigned.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-frontend/kuberesources/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 18, "ruleId": "CKV_K8S_37", "ruleName": "MinimizeCapabilities", "contextText": "18       - name: udagram-frontend-api\n", "snippetText": "18       - name: udagram-frontend-api\n        image: eedy/frontend:latest\n        ports:\n"}, "tags": [{"key": "cis_category", "value": "5.2.9", "shiftleft_managed": false}]}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Image should use digest.", "description": "Image should use digest.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_43/756826557aea4e0a1fe14f81c1f0ec4e", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageDigest", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Image should use digest.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-frontend/kuberesources/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 18, "ruleId": "CKV_K8S_43", "ruleName": "ImageDigest", "contextText": "18       - name: udagram-frontend-api\n", "snippetText": "18       - name: udagram-frontend-api\n        image: eedy/frontend:latest\n        ports:\n"}, "tags": []}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Containers should not run with allowPrivilegeEscalation.", "description": "CIS Benchmark: **5.2.5**\n\nMinimize the admission of containers with allowPrivilegeEscalation.\n\nA container running with the allowPrivilegeEscalation flag set to true may have processes that can gain more privileges than their parent. There should be at least one PodSecurityPolicy (PSP) defined which does not permit containers to allow privilege escalation. The option exists (and is defaulted to true) to permit setuid binaries to run. If you have need to run containers which use setuid binaries or require privilege escalation, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.allowPrivilegeEscalation` field is set to `false`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_20/618f94ac78fb8a7c48908daa933a10a4", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "AllowPrivilegeEscalation", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Containers should not run with allowPrivilegeEscalation.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-frontend/kuberesources/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 18, "ruleId": "CKV_K8S_20", "ruleName": "AllowPrivilegeEscalation", "contextText": "18       - name: udagram-frontend-api\n", "snippetText": "18       - name: udagram-frontend-api\n        image: eedy/frontend:latest\n        ports:\n"}, "tags": [{"key": "cis_category", "value": "5.2.5", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_30/91544bd742dd8f488f22ee42c3aef6c4", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ContainerSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-frontend/kuberesources/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 18, "ruleId": "CKV_K8S_30", "ruleName": "ContainerSecurityContext", "contextText": "18       - name: udagram-frontend-api\n", "snippetText": "18       - name: udagram-frontend-api\n        image: eedy/frontend:latest\n        ports:\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Readiness Probe Should be Configured.", "description": "Readiness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_9/9ffb014b30a3ce6cee3b59171e341fca", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadinessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Readiness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-frontend/kuberesources/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 18, "ruleId": "CKV_K8S_9", "ruleName": "ReadinessProbe", "contextText": "18       - name: udagram-frontend-api\n", "snippetText": "18       - name: udagram-frontend-api\n        image: eedy/frontend:latest\n        ports:\n"}, "tags": []}, {"app": "Monlith-Microservices", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/8ebeb99d49dafecc2e6bc38450688615", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-frontend/kuberesources/service.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "1 apiVersion: v1\n", "snippetText": "1 apiVersion: v1\nkind: Service\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "Monlith-Microservices", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/7adad0fe0849c9f5e06485f9c5af64d8", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-api/udagram-api-feed/kuberesources/service.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "1 apiVersion: v1\n", "snippetText": "1 apiVersion: v1\nkind: Service\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Minimize the admission of root containers.", "description": "CIS Benchmark: **5.2.6**\n\nMinimize the admission of root containers.\n\nContainers may run as any Linux user. Containers which run as the root user, whilst constrained by Container Runtime security features still have a escalated likelihood of container breakout. Ideally, all containers should run as a defined non-UID 0 user. There should be at least one PodSecurityPolicy (PSP) defined which does not permit root users in a container. If you need to run root containers, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.runAsUser.rule` is set to either `MustRunAsNonRoot` or `MustRunAs` with the range of UIDs not including `0`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  runAsUser:\n    # Require the container to run without root privileges.\n    rule: 'MustRunAsNonRoot'\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_23/8fab23612da058b046617706e9f858e0", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainers", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of root containers.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-api/udagram-api-feed/kuberesources/pod.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_23", "ruleName": "RootContainers", "contextText": "1 apiVersion: v1\n", "snippetText": "1 apiVersion: v1\nkind: Pod\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.2.6", "shiftleft_managed": false}]}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Ensure that Service Account Tokens are only mounted where necessary.", "description": "CIS Benchmark: **5.1.6**\n\nEnsure that Service Account Tokens are only mounted where necessary.\n\nMounting service account tokens inside pods can provide an avenue for privilege escalation attacks where an attacker is able to compromise a single pod in the cluster. Avoiding mounting these tokens removes this attack avenue.\n\n## Remediation\n\nModify the definition of pods and service accounts which do not need to mount service account tokens to disable it.\n", "internal_id": "CKV_K8S_38/4f8e7b25c86f63e8599fa193f44d07cc", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ServiceAccountTokens", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Ensure that Service Account Tokens are only mounted where necessary.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-api/udagram-api-feed/kuberesources/pod.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_38", "ruleName": "ServiceAccountTokens", "contextText": "1 apiVersion: v1\n", "snippetText": "1 apiVersion: v1\nkind: Pod\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.1.6", "shiftleft_managed": false}]}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Containers should run as a high UID to avoid host conflict.", "description": "Containers should run as a high UID to avoid host conflict.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_40/5f7670b3004243e0d24c202b12dfe375", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainersHighUID", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Containers should run as a high UID to avoid host conflict.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-api/udagram-api-feed/kuberesources/pod.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_40", "ruleName": "RootContainersHighUID", "contextText": "1 apiVersion: v1\n", "snippetText": "1 apiVersion: v1\nkind: Pod\nmetadata:\n"}, "tags": []}, {"app": "Monlith-Microservices", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/f8f06a4cba35736cfa7e8987e4918975", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-api/udagram-api-feed/kuberesources/pod.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "1 apiVersion: v1\n", "snippetText": "1 apiVersion: v1\nkind: Pod\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "description": "CIS Benchmark: **5.7.2**\n\nEnsure that the seccomp profile is set to docker/default in your pod definitions.\n\nSeccomp (secure computing mode) is used to restrict the set of system calls applications can make, allowing cluster administrators greater control over the security of workloads running in the cluster. Kubernetes disables seccomp profiles by default for historical reasons. You should enable it to ensure that the workloads have restricted actions available within the container.\n\n## Remediation\n\nSeccomp is an alpha feature currently. By default, all alpha features are disabled. So, you would need to enable alpha features in the apiserver by passing \"--feature-gates=AllAlpha=true\" argument.\nEdit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to \"--feature-gates=AllAlpha=true\" KUBE_API_ARGS=\"--feature-gates=AllAlpha=true\". Based on your system, restart the kube-apiserver service.\nFor example:\n```bash\nsystemctl restart kube-apiserver.service\n```\n\nUse annotations to enable the docker/default seccomp profile in your pod definitions. An example is as below:\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: trustworthy-pod\n  annotations:\n    seccomp.security.alpha.kubernetes.io/pod: docker/default\nspec:\n  containers:\n    - name: trustworthy-container\n      image: sotrustworthy:latest\n```\n", "internal_id": "CKV_K8S_31/dcbdabceda986c18cf4828313e70a941", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "Seccomp", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-api/udagram-api-feed/kuberesources/pod.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_31", "ruleName": "Seccomp", "contextText": "1 apiVersion: v1\n", "snippetText": "1 apiVersion: v1\nkind: Pod\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.2", "shiftleft_managed": false}]}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_29/783c3134761056429fc0e3b273e12c3c", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "PodSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-api/udagram-api-feed/kuberesources/pod.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_29", "ruleName": "PodSecurityContext", "contextText": "1 apiVersion: v1\n", "snippetText": "1 apiVersion: v1\nkind: Pod\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Image Tag should be fixed - not latest or blank.", "description": "Image Tag should be fixed - not latest or blank.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_14/332d2d1342a3a793d38c97c1a6b7401f", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageTagFixed", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Image Tag should be fixed - not latest or blank.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-api/udagram-api-feed/kuberesources/pod.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 10, "ruleId": "CKV_K8S_14", "ruleName": "ImageTagFixed", "contextText": "10   - name: udagram-backend-feed-api\n", "snippetText": "10   - name: udagram-backend-feed-api\n    image: eedy/backendapifeedimage:latest\n    ports:\n"}, "tags": []}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Liveness Probe Should be Configured.", "description": "Liveness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_8/896c85800cfd010034ee5972f04f1d15", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "LivenessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Liveness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-api/udagram-api-feed/kuberesources/pod.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 10, "ruleId": "CKV_K8S_8", "ruleName": "LivenessProbe", "contextText": "10   - name: udagram-backend-feed-api\n", "snippetText": "10   - name: udagram-backend-feed-api\n    image: eedy/backendapifeedimage:latest\n    ports:\n"}, "tags": []}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Use read-only filesystem for containers where possible.", "description": "Use read-only filesystem for containers where possible.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_22/c85b60d1e56a146f845b9a6d9a245d7d", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadOnlyFilesystem", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Use read-only filesystem for containers where possible.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-api/udagram-api-feed/kuberesources/pod.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 10, "ruleId": "CKV_K8S_22", "ruleName": "ReadOnlyFilesystem", "contextText": "10   - name: udagram-backend-feed-api\n", "snippetText": "10   - name: udagram-backend-feed-api\n    image: eedy/backendapifeedimage:latest\n    ports:\n"}, "tags": []}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Minimize the admission of containers with the NET_RAW capability.", "description": "CIS Benchmark: **5.2.7**\n\nDo not generally permit containers with the potentially dangerous NET_RAW capability.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. By default this can include potentially dangerous capabilities. With Docker as the container runtime the NET_RAW capability is enabled which may be misused by malicious containers. Ideally, all containers should drop this capability. There should be at least one PodSecurityPolicy (PSP) defined which prevents containers with the NET_RAW capability from launching. If you need to run containers with this capability, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.requiredDropCapabilities` is set to include either `NET_RAW` or `ALL`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  requiredDropCapabilities:\n    - ALL\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_28/aba8c600f95cd8d5cb2f84ad9c2b081e", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "DropCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with the NET_RAW capability.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-api/udagram-api-feed/kuberesources/pod.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 10, "ruleId": "CKV_K8S_28", "ruleName": "DropCapabilities", "contextText": "10   - name: udagram-backend-feed-api\n", "snippetText": "10   - name: udagram-backend-feed-api\n    image: eedy/backendapifeedimage:latest\n    ports:\n"}, "tags": [{"key": "cis_category", "value": "5.2.7", "shiftleft_managed": false}]}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Minimize the admission of containers with capabilities assigned.", "description": "CIS Benchmark: **5.2.9**\n\nMinimize the admission of containers with capabilities assigned.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. Capabilities are parts of the rights generally granted on a Linux system to the root user. In many cases applications running in containers do not require any capabilities to operate, so from the perspective of the principal of least privilege use of capabilities should be minimized.\n\n## Remediation\n\nReview the use of capabilites in applications runnning on your cluster. Where a namespace contains applicaions which do not require any Linux capabities to operate consider adding a PSP which forbids the admission of containers which do not drop all capabilities.\n\n\n## Additional information\n\n- [Pod Security Policy](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities)", "internal_id": "CKV_K8S_37/b0bbf31cb56c1b53eb7ad3a50b65661c", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MinimizeCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with capabilities assigned.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-api/udagram-api-feed/kuberesources/pod.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 10, "ruleId": "CKV_K8S_37", "ruleName": "MinimizeCapabilities", "contextText": "10   - name: udagram-backend-feed-api\n", "snippetText": "10   - name: udagram-backend-feed-api\n    image: eedy/backendapifeedimage:latest\n    ports:\n"}, "tags": [{"key": "cis_category", "value": "5.2.9", "shiftleft_managed": false}]}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Image should use digest.", "description": "Image should use digest.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_43/f2e747e9e663e00f070bd39078070108", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageDigest", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Image should use digest.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-api/udagram-api-feed/kuberesources/pod.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 10, "ruleId": "CKV_K8S_43", "ruleName": "ImageDigest", "contextText": "10   - name: udagram-backend-feed-api\n", "snippetText": "10   - name: udagram-backend-feed-api\n    image: eedy/backendapifeedimage:latest\n    ports:\n"}, "tags": []}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Containers should not run with allowPrivilegeEscalation.", "description": "CIS Benchmark: **5.2.5**\n\nMinimize the admission of containers with allowPrivilegeEscalation.\n\nA container running with the allowPrivilegeEscalation flag set to true may have processes that can gain more privileges than their parent. There should be at least one PodSecurityPolicy (PSP) defined which does not permit containers to allow privilege escalation. The option exists (and is defaulted to true) to permit setuid binaries to run. If you have need to run containers which use setuid binaries or require privilege escalation, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.allowPrivilegeEscalation` field is set to `false`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_20/ffddca3ab85f166375ee7526c945e4f6", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "AllowPrivilegeEscalation", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Containers should not run with allowPrivilegeEscalation.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-api/udagram-api-feed/kuberesources/pod.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 10, "ruleId": "CKV_K8S_20", "ruleName": "AllowPrivilegeEscalation", "contextText": "10   - name: udagram-backend-feed-api\n", "snippetText": "10   - name: udagram-backend-feed-api\n    image: eedy/backendapifeedimage:latest\n    ports:\n"}, "tags": [{"key": "cis_category", "value": "5.2.5", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_30/5ae8df300e597bac5cbccdf7ce2a10d5", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ContainerSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-api/udagram-api-feed/kuberesources/pod.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 10, "ruleId": "CKV_K8S_30", "ruleName": "ContainerSecurityContext", "contextText": "10   - name: udagram-backend-feed-api\n", "snippetText": "10   - name: udagram-backend-feed-api\n    image: eedy/backendapifeedimage:latest\n    ports:\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Readiness Probe Should be Configured.", "description": "Readiness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_9/90ed210c6860f1e8466d81fe9768f714", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadinessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Readiness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-api/udagram-api-feed/kuberesources/pod.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 10, "ruleId": "CKV_K8S_9", "ruleName": "ReadinessProbe", "contextText": "10   - name: udagram-backend-feed-api\n", "snippetText": "10   - name: udagram-backend-feed-api\n    image: eedy/backendapifeedimage:latest\n    ports:\n"}, "tags": []}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Minimize the admission of root containers.", "description": "CIS Benchmark: **5.2.6**\n\nMinimize the admission of root containers.\n\nContainers may run as any Linux user. Containers which run as the root user, whilst constrained by Container Runtime security features still have a escalated likelihood of container breakout. Ideally, all containers should run as a defined non-UID 0 user. There should be at least one PodSecurityPolicy (PSP) defined which does not permit root users in a container. If you need to run root containers, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.runAsUser.rule` is set to either `MustRunAsNonRoot` or `MustRunAs` with the range of UIDs not including `0`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  runAsUser:\n    # Require the container to run without root privileges.\n    rule: 'MustRunAsNonRoot'\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_23/c66ac611bfc0a204afbdedb088fbcae6", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainers", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of root containers.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-api/udagram-api-user/kuberesources/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_23", "ruleName": "RootContainers", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.2.6", "shiftleft_managed": false}]}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Ensure that Service Account Tokens are only mounted where necessary.", "description": "CIS Benchmark: **5.1.6**\n\nEnsure that Service Account Tokens are only mounted where necessary.\n\nMounting service account tokens inside pods can provide an avenue for privilege escalation attacks where an attacker is able to compromise a single pod in the cluster. Avoiding mounting these tokens removes this attack avenue.\n\n## Remediation\n\nModify the definition of pods and service accounts which do not need to mount service account tokens to disable it.\n", "internal_id": "CKV_K8S_38/5972342e722dade4eb26e768ecc5445b", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ServiceAccountTokens", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Ensure that Service Account Tokens are only mounted where necessary.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-api/udagram-api-user/kuberesources/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_38", "ruleName": "ServiceAccountTokens", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.1.6", "shiftleft_managed": false}]}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Containers should run as a high UID to avoid host conflict.", "description": "Containers should run as a high UID to avoid host conflict.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_40/1055e2330fdf091ec3699c3c998045a1", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "RootContainersHighUID", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Containers should run as a high UID to avoid host conflict.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-api/udagram-api-user/kuberesources/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_40", "ruleName": "RootContainersHighUID", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": []}, {"app": "Monlith-Microservices", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/fe543c8bb5060efd475ba0eb6194139c", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-api/udagram-api-user/kuberesources/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "description": "CIS Benchmark: **5.7.2**\n\nEnsure that the seccomp profile is set to docker/default in your pod definitions.\n\nSeccomp (secure computing mode) is used to restrict the set of system calls applications can make, allowing cluster administrators greater control over the security of workloads running in the cluster. Kubernetes disables seccomp profiles by default for historical reasons. You should enable it to ensure that the workloads have restricted actions available within the container.\n\n## Remediation\n\nSeccomp is an alpha feature currently. By default, all alpha features are disabled. So, you would need to enable alpha features in the apiserver by passing \"--feature-gates=AllAlpha=true\" argument.\nEdit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to \"--feature-gates=AllAlpha=true\" KUBE_API_ARGS=\"--feature-gates=AllAlpha=true\". Based on your system, restart the kube-apiserver service.\nFor example:\n```bash\nsystemctl restart kube-apiserver.service\n```\n\nUse annotations to enable the docker/default seccomp profile in your pod definitions. An example is as below:\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: trustworthy-pod\n  annotations:\n    seccomp.security.alpha.kubernetes.io/pod: docker/default\nspec:\n  containers:\n    - name: trustworthy-container\n      image: sotrustworthy:latest\n```\n", "internal_id": "CKV_K8S_31/3843e4b9cc81f0b1923160f3770eed46", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "Seccomp", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Ensure that the seccomp profile is set to docker/default or runtime/default.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-api/udagram-api-user/kuberesources/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_31", "ruleName": "Seccomp", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.2", "shiftleft_managed": false}]}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_29/399eaf0a12da6aef872b1fd821a3a009", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "PodSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-api/udagram-api-user/kuberesources/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_29", "ruleName": "PodSecurityContext", "contextText": "1 apiVersion: apps/v1\n", "snippetText": "1 apiVersion: apps/v1\nkind: Deployment\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Image Tag should be fixed - not latest or blank.", "description": "Image Tag should be fixed - not latest or blank.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_14/0d2887ffc15a11285964809061db2267", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageTagFixed", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Image Tag should be fixed - not latest or blank.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-api/udagram-api-user/kuberesources/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 18, "ruleId": "CKV_K8S_14", "ruleName": "ImageTagFixed", "contextText": "18       - name: udagram-backend-users-api\n", "snippetText": "18       - name: udagram-backend-users-api\n        image: eedy/backendapiusersimage:latest\n        ports:\n"}, "tags": []}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Liveness Probe Should be Configured.", "description": "Liveness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_8/25b5f41b02ec9278bc161933304b1452", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "LivenessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Liveness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-api/udagram-api-user/kuberesources/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 18, "ruleId": "CKV_K8S_8", "ruleName": "LivenessProbe", "contextText": "18       - name: udagram-backend-users-api\n", "snippetText": "18       - name: udagram-backend-users-api\n        image: eedy/backendapiusersimage:latest\n        ports:\n"}, "tags": []}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Use read-only filesystem for containers where possible.", "description": "Use read-only filesystem for containers where possible.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_22/582a0f6af94568317a0f15c1e4327261", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadOnlyFilesystem", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Use read-only filesystem for containers where possible.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-api/udagram-api-user/kuberesources/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 18, "ruleId": "CKV_K8S_22", "ruleName": "ReadOnlyFilesystem", "contextText": "18       - name: udagram-backend-users-api\n", "snippetText": "18       - name: udagram-backend-users-api\n        image: eedy/backendapiusersimage:latest\n        ports:\n"}, "tags": []}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Minimize the admission of containers with the NET_RAW capability.", "description": "CIS Benchmark: **5.2.7**\n\nDo not generally permit containers with the potentially dangerous NET_RAW capability.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. By default this can include potentially dangerous capabilities. With Docker as the container runtime the NET_RAW capability is enabled which may be misused by malicious containers. Ideally, all containers should drop this capability. There should be at least one PodSecurityPolicy (PSP) defined which prevents containers with the NET_RAW capability from launching. If you need to run containers with this capability, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.requiredDropCapabilities` is set to include either `NET_RAW` or `ALL`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  requiredDropCapabilities:\n    - ALL\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_28/426f3e91adcecd3a456e151be32ae5b6", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "DropCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with the NET_RAW capability.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-api/udagram-api-user/kuberesources/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 18, "ruleId": "CKV_K8S_28", "ruleName": "DropCapabilities", "contextText": "18       - name: udagram-backend-users-api\n", "snippetText": "18       - name: udagram-backend-users-api\n        image: eedy/backendapiusersimage:latest\n        ports:\n"}, "tags": [{"key": "cis_category", "value": "5.2.7", "shiftleft_managed": false}]}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Minimize the admission of containers with capabilities assigned.", "description": "CIS Benchmark: **5.2.9**\n\nMinimize the admission of containers with capabilities assigned.\n\nContainers run with a default set of capabilities as assigned by the Container Runtime. Capabilities are parts of the rights generally granted on a Linux system to the root user. In many cases applications running in containers do not require any capabilities to operate, so from the perspective of the principal of least privilege use of capabilities should be minimized.\n\n## Remediation\n\nReview the use of capabilites in applications runnning on your cluster. Where a namespace contains applicaions which do not require any Linux capabities to operate consider adding a PSP which forbids the admission of containers which do not drop all capabilities.\n\n\n## Additional information\n\n- [Pod Security Policy](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities)", "internal_id": "CKV_K8S_37/412ccb38464fec5b33abf5e6deb2d86e", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "MinimizeCapabilities", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Minimize the admission of containers with capabilities assigned.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-api/udagram-api-user/kuberesources/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 18, "ruleId": "CKV_K8S_37", "ruleName": "MinimizeCapabilities", "contextText": "18       - name: udagram-backend-users-api\n", "snippetText": "18       - name: udagram-backend-users-api\n        image: eedy/backendapiusersimage:latest\n        ports:\n"}, "tags": [{"key": "cis_category", "value": "5.2.9", "shiftleft_managed": false}]}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Image should use digest.", "description": "Image should use digest.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_43/f7317f4e1a8cc1a9f20c779a8f2316d1", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ImageDigest", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Image should use digest.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-api/udagram-api-user/kuberesources/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 18, "ruleId": "CKV_K8S_43", "ruleName": "ImageDigest", "contextText": "18       - name: udagram-backend-users-api\n", "snippetText": "18       - name: udagram-backend-users-api\n        image: eedy/backendapiusersimage:latest\n        ports:\n"}, "tags": []}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Containers should not run with allowPrivilegeEscalation.", "description": "CIS Benchmark: **5.2.5**\n\nMinimize the admission of containers with allowPrivilegeEscalation.\n\nA container running with the allowPrivilegeEscalation flag set to true may have processes that can gain more privileges than their parent. There should be at least one PodSecurityPolicy (PSP) defined which does not permit containers to allow privilege escalation. The option exists (and is defaulted to true) to permit setuid binaries to run. If you have need to run containers which use setuid binaries or require privilege escalation, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.\n## Remediation\n\nCreate a PodSecurityPolicy (PSP) as described in the Kubernetes documentation, ensuring that the `.spec.allowPrivilegeEscalation` field is set to `false`.\n```yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: example\nspec:\n  privileged: false  # Don't allow privileged pods!\n  # Required to prevent escalations to root.\n  allowPrivilegeEscalation: false\n  ...\n```\n\n\n## Additional information\n\n- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)\n- [Privilege Escalation](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation)", "internal_id": "CKV_K8S_20/516a03f140091bf2a8f6662f8debb116", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "AllowPrivilegeEscalation", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Containers should not run with allowPrivilegeEscalation.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-api/udagram-api-user/kuberesources/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 18, "ruleId": "CKV_K8S_20", "ruleName": "AllowPrivilegeEscalation", "contextText": "18       - name: udagram-backend-users-api\n", "snippetText": "18       - name: udagram-backend-users-api\n        image: eedy/backendapiusersimage:latest\n        ports:\n"}, "tags": [{"key": "cis_category", "value": "5.2.5", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Apply security context to your pods and containers.", "description": "CIS Benchmark: **5.7.3**\n\nApply Security Context to Your Pods and Containers.\n\nA security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.\n\n## Remediation\n\nFollow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.\n\n\n## Additional information\n\n- [CIS Docker Benchmark](https://www.cisecurity.org/benchmark/docker/)\n- [Docker Benchmark Scripts](https://github.com/docker/docker-bench-security)", "internal_id": "CKV_K8S_30/a5ee27c30f0a3b500d080543d802197e", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ContainerSecurityContext", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Apply security context to your pods and containers.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-api/udagram-api-user/kuberesources/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 18, "ruleId": "CKV_K8S_30", "ruleName": "ContainerSecurityContext", "contextText": "18       - name: udagram-backend-users-api\n", "snippetText": "18       - name: udagram-backend-users-api\n        image: eedy/backendapiusersimage:latest\n        ports:\n"}, "tags": [{"key": "cis_category", "value": "5.7.3", "shiftleft_managed": false}]}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Readiness Probe Should be Configured.", "description": "Readiness Probe Should be Configured.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_K8S_9/a9ab497a6be7b92a05b5b41292b59829", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "ReadinessProbe", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Readiness Probe Should be Configured.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-api/udagram-api-user/kuberesources/deployment.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 18, "ruleId": "CKV_K8S_9", "ruleName": "ReadinessProbe", "contextText": "18       - name: udagram-backend-users-api\n", "snippetText": "18       - name: udagram-backend-users-api\n        image: eedy/backendapiusersimage:latest\n        ports:\n"}, "tags": []}, {"app": "Monlith-Microservices", "type": "extscan", "title": "The default namespace should not be used.", "description": "CIS Benchmark: **5.7.4**\n\nKubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.\n\nResources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources.\n\n## Remediation\n\nEnsure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. If possible, consider adopting new techniques such as `hierarchical namespaces`.\n\n\n## Additional information\n\n- [Multi-tenancy SIG](https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/hnc/docs/user-guide/concepts.md#basic)", "internal_id": "CKV_K8S_21/09de7eb96dda54630e212ee442e9b982", "severity": "critical", "owasp_category": "a6-misconfiguration", "category": "DefaultNamespace", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "The default namespace should not be used.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-api/udagram-api-user/kuberesources/service.yaml", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_K8S_21", "ruleName": "DefaultNamespace", "contextText": "1 apiVersion: v1\n", "snippetText": "1 apiVersion: v1\nkind: Service\nmetadata:\n"}, "tags": [{"key": "cis_category", "value": "5.7.4", "shiftleft_managed": false}, {"key": "cis_status", "value": "SCORED", "shiftleft_managed": false}]}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Ensure that HEALTHCHECK instructions have been added to container images .", "description": "Ensure that HEALTHCHECK instructions have been added to container images .\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_DOCKER_2/e41ff40e03aa1d8c14ee4e0d4d7fb8f8", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "HealthcheckExists", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Ensure that HEALTHCHECK instructions have been added to container images .", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/reverse_proxy/Dockerfile", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_DOCKER_2", "ruleName": "HealthcheckExists", "contextText": "0 FROM nginx:alpine\n", "snippetText": "0 FROM nginx:alpine\n"}, "tags": []}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Ensure that a user for the container has been created.", "description": "Ensure that a user for the container has been created.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_DOCKER_3/5341f8e43558d6d8e64fcf528ca8ffbb", "severity": "info", "owasp_category": "a6-misconfiguration", "category": "UserExists", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Ensure that a user for the container has been created.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/reverse_proxy/Dockerfile", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_DOCKER_3", "ruleName": "UserExists", "contextText": "0 FROM nginx:alpine\n", "snippetText": "0 FROM nginx:alpine\n"}, "tags": []}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Ensure that HEALTHCHECK instructions have been added to container images .", "description": "Ensure that HEALTHCHECK instructions have been added to container images .\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_DOCKER_2/5c5505f5d2513b9f9b52a5434783812e", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "HealthcheckExists", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Ensure that HEALTHCHECK instructions have been added to container images .", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-frontend/Dockerfile", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_DOCKER_2", "ruleName": "HealthcheckExists", "contextText": "0 ## Build\n", "snippetText": "0 ## Build\n"}, "tags": []}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Ensure that a user for the container has been created.", "description": "Ensure that a user for the container has been created.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_DOCKER_3/3c6d91440fed22c94521a976d82432e1", "severity": "info", "owasp_category": "a6-misconfiguration", "category": "UserExists", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Ensure that a user for the container has been created.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-frontend/Dockerfile", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_DOCKER_3", "ruleName": "UserExists", "contextText": "0 ## Build\n", "snippetText": "0 ## Build\n"}, "tags": []}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Ensure that HEALTHCHECK instructions have been added to container images .", "description": "Ensure that HEALTHCHECK instructions have been added to container images .\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_DOCKER_2/3ef0cb752b5d4f828144c6620cc9b85c", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "HealthcheckExists", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Ensure that HEALTHCHECK instructions have been added to container images .", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-api/udagram-api-feed/Dockerfile", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_DOCKER_2", "ruleName": "HealthcheckExists", "contextText": "0 # Use NodeJS base image\n", "snippetText": "0 # Use NodeJS base image\n"}, "tags": []}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Ensure that a user for the container has been created.", "description": "Ensure that a user for the container has been created.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_DOCKER_3/aa427894d658c436a1a24fff9329bd76", "severity": "info", "owasp_category": "a6-misconfiguration", "category": "UserExists", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Ensure that a user for the container has been created.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-api/udagram-api-feed/Dockerfile", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_DOCKER_3", "ruleName": "UserExists", "contextText": "0 # Use NodeJS base image\n", "snippetText": "0 # Use NodeJS base image\n"}, "tags": []}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Ensure that HEALTHCHECK instructions have been added to container images .", "description": "Ensure that HEALTHCHECK instructions have been added to container images .\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_DOCKER_2/333c37a64ec8971a2ac2131c20e9bbda", "severity": "moderate", "owasp_category": "a6-misconfiguration", "category": "HealthcheckExists", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Ensure that HEALTHCHECK instructions have been added to container images .", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-api/udagram-api-user/Dockerfile", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_DOCKER_2", "ruleName": "HealthcheckExists", "contextText": "0 # Use NodeJS base image\n", "snippetText": "0 # Use NodeJS base image\n"}, "tags": []}, {"app": "Monlith-Microservices", "type": "extscan", "title": "Ensure that a user for the container has been created.", "description": "Ensure that a user for the container has been created.\n\n## Documentation\n\n- [AWS Terraform](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Terraform](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [Google Cloud Terraform](https://registry.terraform.io/providers/hashicorp/google/latest/docs)", "internal_id": "CKV_DOCKER_3/f7e7425d0c50984dcbfa97e85dffab81", "severity": "info", "owasp_category": "a6-misconfiguration", "category": "UserExists", "details": {"repoContext": {"gitProvider": "github", "ciProvider": "", "repositoryName": "Monlith-Microservices", "repositoryUri": "https://github.com/eedygreen/Monlith-Microservices", "revisionId": "91bd94d6a18b6566411eb788ab08dafe6aab86f0", "branch": "dev", "invokedBy": "eedygreen <idris.isah2@st.futminna.edu.ng>", "pullRequest": false, "botUser": false}, "name": "Ensure that a user for the container has been created.", "tags": "Scan", "fileName": "file:///home/eedy/Documents/Monlith-Microservices/udagram-api/udagram-api-user/Dockerfile", "DATA_TYPE": "OSS_SCAN", "lineNumber": 1, "ruleId": "CKV_DOCKER_3", "ruleName": "UserExists", "contextText": "0 # Use NodeJS base image\n", "snippetText": "0 # Use NodeJS base image\n"}, "tags": []}]}